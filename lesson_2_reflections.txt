What happens when you initialize a repository? Why do you need to do it?

When we initialize a repository, git start tracking that directory for version control and changes.
If we do not initialize git repository, gthen git will have no information about which directories to keep track of.
Obviously git cannot keep track of all the directories on system.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area provides you a middlep latform, wherein you can make all the necessary arrangements,
bafore actually packing you changes into a commit.

It allowes you to choose which files should be included in a commit.

How can you use the staging area to make sure you have one commit per logical change?

Changes which we feel are part of one logical change, can be added to staging area from working directory.
Those changes that should not be part of the currently planned commit will still be present in working directory.
Since staging area contains only those changes which we have added to staging area, only those changes will be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

We can use branches when we want to experiment with our code. We can keep stable version untouched.
Then create a new branch and start experimenting on the new branch. 
If we fill that the new experiment is successful, then we can merge the branches to bring changes to main branch.

How do the diagrams help you visualize the branch structure?

Since we can draw flowchart like diagrams with nodes and their connections, we can easily guess
which commits are rechable from where, where currently our head is pointing, how branches are placed.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When we merge two branches together changes in both branches are combined into the currently checked out branch.
A new commit is created in the currently checked out branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging reduces the developers effort of manually merging the entire code.
There are certain situations when git cannot resolve the commit. At that point developer has to manually entertain that merge.
This is called as conflict resolution.